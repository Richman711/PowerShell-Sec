function Get-HipsFWLog{
<#
    .SYNOPSIS
        Retrieves McAfee HIPs log information about the target computer. Using 
        SMB to retrieve the log file from the system.
    .DESCRIPTION
        This Command will return a local HIPs FW object from a remote system.
        .PARAMETER target
        One computer name or IP address. 
    .EXAMPLE
        $systemFWLog = Get-HipsLogMT -ComputerName <System Name>
        This example will retrieve from the target machine.
    .EXAMPLE
        Get-HipsLogMT <System Name> | Out-GridView
        This example displays the FW log in a window to quickly review and filter
    .EXAMPLE
        "<System Name>" | Get-HipsLog | ConvertTo-Csv -NoTypeInformation | Out-File <FilePath>
        This example exports the FW log as a simple .csv 
	.NOTES
		Author: Richard Orman
		GITHUB  : http://github.com/Richman711.com/
#>
    [CmdletBinding()]
    Param(
        [Parameter(ValueFromPipeline=$True,
                   Mandatory=$True)]
        [Alias('CN','MachineName','Name')]
        [string[]]$ComputerName
        
    ) #Param

    BEGIN{}

    PROCESS{
        $User = [Environment]::UserName
        $logFile = "\\$ComputerName\c$\ProgramData\McAfee\Host Intrusion Prevention\Event.log"
        & 'C:\Program Files\McAfee\Host Intrusion Prevention\ClientControl.exe' /export /s $logFile "C:\Users\$User\AppData\Local\Temp\McAfeeLogs\$ComputerName.txt"
        $content = gc "C:\Users\$User\AppData\Local\Temp\McAfeeLogs\$ComputerName.txt" -Encoding Unknown
        
        $fwEntry = [PSCustomObject]@{ #Elements of the Log generated by McAfee
            'Time'              = [string]
            'IP Address'        = [string]
            'Sniffer CAP'       = [string]
            'Rule ID'           = [string]
            'Protocol'          = [int32]
            'Local IP Address'  = [string]
            'Local Port'        = [int32]
            'Remote IP Address' = [string]
            'Remote Port'       = [int32]
            'Inbound'           = [string]
            'Permit'            = [string]
            'Process ID'        = [string]
            'Path'              = [string]
            'Description'       = [string]
        }

        $fwLog = @()
        $number = $content.Count        
        $line =0
        Write-Verbose "Building Log Collection please be patient there are over $number lines to process"    
            
        Function Do-FWEntry($line){                   
                    $newEntry = $fwEntry.psobject.Copy()

                    $newEntry.'Time' = $content[$line-1].Substring(9).Trim()                   
                    
                    $newEntry.'IP Address' = $content[$line+1].Substring(11).Trim()                 

                    $newEntry.'Sniffer CAP' = $content[$line+2].Substring(12).Trim()

                    $newEntry.'Rule ID' = $content[$line+3].Substring(11).Trim()

                    $newEntry.'Protocol' = $content[$line+4].Substring(9).Trim()

                    $newEntry.'Local IP Address' = $content[$line+5].Substring(18).Trim()

                    $newEntry.'Local Port' = $content[$line+6].Substring(11).Trim()

                    $newEntry.'Remote IP Address' = $content[$line+7].Substring(18).Trim()

                    $newEntry.'Remote Port' = $content[$line+8].Substring(12).Trim()

                    $newEntry.'Inbound' = $content[$line+9].Substring(9).Trim()

                    $newEntry.'Permit' = $content[$line+10].Substring(9).Trim()

                    $newEntry.'Process ID' = $content[$line+11].Substring(11).Trim()

                    $newEntry.'Path' = $content[$line+12].Substring(9).Trim()
                    
                    $newEntry.'Description' = $content[$line+13].Substring(12).Trim()

                    return $newEntry
        }
        
        Do{
            #Turning on the Proggress Bar can increase the time by about 4X
            <#Write-Progress -Activity "Building Logs" -status "Currently on line $line"`
                -PercentComplete(($line/$content.Count)*100)#>
            $fields = $content[$line].Split(":")
           
            if($fields[0] -ccontains "Event Type"){
                
                if($fields[1].Trim() -eq "Traffic"){
                   
                    $fwLog += Do-FWEntry($line)

                    $line = $line + 13
                } else { #IPS Entries
                    $line = $line +10
                }
            }
            else{
                $line ++
            }            
        }while ($line -lt $content.count) 

        $number = $fwLog.Count        
        Write-Verbose "Finished!"
        Write-Verbose ""        
        Write-Verbose "FWLog containd $number log entries"

        return $fwLog

    }# End of PROCESS
}# End of Get-HipsLog
